# -*- coding: utf-8 -*-
"""DAA pt 10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JpZ1THkE7KZAYJV28CVaxAg7dtNO36BW

aplikasi linear programming pulp
"""

import pulp

# instantiate our problem class
model = pulp.LpProblem("ProfitMaximisingProblem", pulp.LpMaximize)

A = pulp.LpVariable('A', lowBound=0 cat='integer')
B = pulp.LpVariable('B', lowBound=0 cat='integer')

# objective function
model += 5000 * A + 2500 * B, "Profit"
# constraints
model += 3 * A + 2 * B <= 20
model += 4 * A + 3 * B <= 30
model += 4 * A + 3 * B <= 44

# solve our problem
model.solve()
pulp.LpStatus[model.status]

# print our decision variable values
print (A.varValue)
print (B.varValue)

# print our objective function value
print (pulp.value(model.objective))

"""import scipy dan linprog menggunakan scipy"""

# import required libraries
import numpy as np
from scipy.optimize import linprog

# set the inequality constraints matrix
# note: the inequality constraints must be in the form of <=
A = np.array([[1, 0], [2, 3], [1, 1], [-1, 0], [0, -1]])

# set the inequality constraints vector
b = np.array ([16, 9, 8, 0, 0])

# set the coefficients of the linear objective function vector
# note: when maxmizing, change the signs of the c vector coefficient
C = np.array ([-5, -7])

# solve linear programming problem
res = linprog(C, A_ub=A, B_ub=B)

# print results
print('optimal value:', round(res.fun*-1, ndigits=2),
      '\nx values:', res.X,
      '\nNumber of iterations performed:', res.nit,
      '\nStatus:',  res.Message)